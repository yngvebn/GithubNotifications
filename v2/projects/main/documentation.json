{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0e7c300085f0891ea52b8d846a84f5c0542d9436ece20da8818b7a8ba7e9c5d6d3553fb77a4fe7f4adf77c1f786132955868395ee68a490a97b403e992a82ad0",
            "file": "projects/main/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GitHubConfig | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "githubService",
                    "defaultValue": "inject(GitHubService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "groupedPullRequests",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "pullRequests",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PullRequest[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getRepositoryNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "groupPullRequests",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "loadPullRequests",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "openOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPullRequest",
                    "args": [
                        {
                            "name": "pr",
                            "type": "PullRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pr",
                            "type": "PullRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processPullRequest",
                    "args": [
                        {
                            "name": "pr",
                            "type": "PullRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PullRequest>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "pr",
                            "type": "PullRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startPeriodicRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { GitHubConfig, GitHubService, PullRequest } from '@shared/services';\r\nimport { Subject, takeUntil, timer } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n// Chrome API availability check\r\ndeclare let chrome: any;\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css'\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  private destroy$ = new Subject<void>();\r\n  private githubService = inject(GitHubService);\r\n\r\n  config: GitHubConfig | null = null;\r\n  pullRequests: PullRequest[] = [];\r\n  groupedPullRequests: { [key: string]: PullRequest[] } = {};\r\n  loading = true;\r\n  error: string | null = null;\r\n\r\n  async ngOnInit() {\r\n    console.log('🚀 AppComponent: Initializing...');\r\n    await this.loadConfig();\r\n    if (this.config) {\r\n      console.log('✅ AppComponent: Config loaded, starting PR fetch', this.config);\r\n      this.loadPullRequests();\r\n      this.startPeriodicRefresh();\r\n    } else {\r\n      console.warn('⚠️ AppComponent: No config found, stopping here');\r\n      this.loading = false;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private async loadConfig() {\r\n    console.log('🔧 AppComponent: Loading config...');\r\n    try {\r\n      this.config = await this.githubService.getConfig();\r\n      console.log('✅ AppComponent: Config loaded successfully:', this.config ? 'Config found' : 'No config');\r\n    } catch (error) {\r\n      console.error('❌ AppComponent: Error loading config:', error);\r\n      this.error = 'Failed to load configuration';\r\n    }\r\n  }\r\n\r\n  private loadPullRequests() {\r\n    if (!this.config) {\r\n      console.warn('⚠️ AppComponent: No config available, cannot load PRs');\r\n      return;\r\n    }\r\n\r\n    console.log('📥 AppComponent: Starting to load pull requests...');\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    this.githubService.getPullRequests(this.config)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: async (pullRequests) => {\r\n          console.log('📋 AppComponent: Received pull requests from service:', pullRequests.length, 'items');\r\n          console.log('📋 AppComponent: Raw pull requests:', pullRequests);\r\n\r\n          // Process each pull request to get detailed information\r\n          const processedPRs: PullRequest[] = [];\r\n          for (const pr of pullRequests) {\r\n            try {\r\n              const detailedPR = await this.processPullRequest(pr);\r\n              processedPRs.push(detailedPR);\r\n            } catch (error) {\r\n              console.error('❌ AppComponent: Error processing PR:', error);\r\n              processedPRs.push(pr); // Use basic PR data if detailed processing fails\r\n            }\r\n          }\r\n\r\n          console.log('✅ AppComponent: Processed pull requests:', processedPRs.length, 'items');\r\n          this.pullRequests = processedPRs;\r\n          this.groupPullRequests();\r\n          console.log('📊 AppComponent: Grouped pull requests:', this.groupedPullRequests);\r\n          this.loading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('❌ AppComponent: Error loading pull requests:', error);\r\n          this.error = 'Failed to load pull requests';\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  private async processPullRequest(pr: PullRequest): Promise<PullRequest> {\r\n    // The GitHub service already processes the PR details\r\n    return pr;\r\n  }\r\n\r\n  private groupPullRequests() {\r\n    console.log('📊 AppComponent: Grouping pull requests...');\r\n    this.groupedPullRequests = this.pullRequests.reduce((groups, pr) => {\r\n      const repoName = pr.repository.name;\r\n      if (!groups[repoName]) {\r\n        groups[repoName] = [];\r\n      }\r\n      groups[repoName].push(pr);\r\n      return groups;\r\n    }, {} as { [key: string]: PullRequest[] });\r\n    console.log('📊 AppComponent: Grouped result:', this.groupedPullRequests);\r\n  }\r\n\r\n  private startPeriodicRefresh() {\r\n    // Refresh every minute\r\n    timer(60000, 60000)\r\n      .pipe(\r\n        takeUntil(this.destroy$),\r\n        switchMap(() => {\r\n          if (this.config) {\r\n            return this.githubService.getPullRequests(this.config);\r\n          }\r\n          return [];\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: async (pullRequests) => {\r\n          // Process pull requests\r\n          const processedPRs: PullRequest[] = [];\r\n          for (const pr of pullRequests) {\r\n            try {\r\n              const detailedPR = await this.processPullRequest(pr);\r\n              processedPRs.push(detailedPR);\r\n            } catch (error) {\r\n              console.error('Error processing PR:', error);\r\n              processedPRs.push(pr);\r\n            }\r\n          }\r\n\r\n          this.pullRequests = processedPRs;\r\n          this.groupPullRequests();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error during periodic refresh:', error);\r\n        }\r\n      });\r\n  }\r\n\r\n  openPullRequest(pr: PullRequest) {\r\n    if (typeof chrome !== 'undefined' && chrome.tabs) {\r\n      chrome.tabs.create({ url: pr.url });\r\n    } else {\r\n      window.open(pr.url, '_blank');\r\n    }\r\n  }\r\n\r\n  openOptions() {\r\n    if (typeof chrome !== 'undefined' && chrome.runtime) {\r\n      chrome.runtime.openOptionsPage();\r\n    }\r\n  }\r\n\r\n  getRepositoryNames(): string[] {\r\n    return Object.keys(this.groupedPullRequests);\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"github-notifications\">\n  <div class=\"header\" [class.header-compact]=\"config && !loading && !error\">\n    <h3>GitHub Pull Requests</h3>\n    <button class=\"options-btn\" (click)=\"openOptions()\" title=\"Options\">⚙️</button>\n  </div>\n\n  <!-- Loading state -->\n  @if (loading) {\n    <div class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Loading pull requests...</p>\n    </div>\n  }\n\n  <!-- Error state -->\n  @if (error && !loading) {\n    <div class=\"error\">\n      <p>{{ error }}</p>\n      <button (click)=\"openOptions()\">Open Options</button>\n    </div>\n  }\n\n  <!-- No configuration -->\n  @if (!config && !loading && !error) {\n    <div class=\"no-config\">\n      <h4>Missing configuration</h4>\n      <p>Please provide your GitHub token in Options</p>\n      <button (click)=\"openOptions()\">Open Options</button>\n    </div>\n  }\n\n  <!-- Pull requests -->\n  @if (config && !loading && !error) {\n    <div class=\"pull-requests\">\n      @if (pullRequests.length === 0) {\n        <div class=\"no-prs\">\n          <p>No open pull requests found! 🎉</p>\n        </div>\n      }\n      @for (repoName of getRepositoryNames(); track repoName) {\n        <div class=\"repository-group\">\n          <div class=\"repository-name\">{{ repoName }}</div>\n          @for (pr of groupedPullRequests[repoName]; track pr) {\n            <div\n              class=\"pull-request\"\n              [class.pull-request-draft]=\"pr.draft\"\n              (click)=\"openPullRequest(pr)\"\n              >\n              <div class=\"pr-icon\">\n                <img src=\"assets/icon_16.png\" alt=\"PR\" />\n              </div>\n              <div class=\"pr-info\">\n                <div class=\"pr-title\">\n                  {{ pr.title }}\n                  @if (pr.draft) {\n                    <span class=\"draft-badge\">Draft</span>\n                  }\n                </div>\n                <div class=\"pr-summary\">\n                  <span class=\"pr-number\">{{ pr.number }}</span>\n                  opened\n                  <span class=\"pr-opened\">{{ pr.createdAt }}</span>\n                  by\n                  <span class=\"pr-opened-by\">{{ pr.openedBy.name }}</span>\n                </div>\n              </div>\n              <div class=\"pr-avatar\">\n                <img [src]=\"pr.openedBy.avatar\" [alt]=\"pr.openedBy.name\" />\n              </div>\n            </div>\n          }\n        </div>\n      }\n    </div>\n  }\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/main/src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideHttpClient()\r\n  ]\r\n}"
            },
            {
                "name": "chrome",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/main/src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/main/src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/main/src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideHttpClient()\r\n  ]\r\n}"
                }
            ],
            "projects/main/src/app/app.component.ts": [
                {
                    "name": "chrome",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/main/src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/main/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/main/src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chrome",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/main/src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}