name: Build and Publish Chrome Extension

on:
  push:
    branches: [ main, master, version2 ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, version2 ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: v2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: v2/package-lock.json

    - name: Bump version with build number
      id: version
      run: |
        node ../scripts/bump-version-build.js ${{ github.run_number }}
        echo "New version set using build number: ${{ github.run_number }}"

    - name: Install dependencies
      run: npm install

    - name: Build extension
      run: npm run build:prod

    - name: Create extension package
      run: |
        cd dist
        VERSION=$(node -p "require('../manifest.json').version")
        zip -r ../extension-v${VERSION}.zip .
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
      id: package

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-build
        path: v2/extension-v${{ steps.package.outputs.version }}.zip

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-build
        path: ./

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install chrome-webstore-upload-cli
      run: npm install -g chrome-webstore-upload-cli

    - name: Upload and Publish to Chrome Web Store
      env:
        EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
      run: |
        # Find the extension file (it will be named extension-v*.zip)
        EXTENSION_FILE=$(ls extension-v*.zip | head -n1)
        echo "Found extension file: $EXTENSION_FILE"

        # Upload the extension
        chrome-webstore-upload upload \
          --source $EXTENSION_FILE \
          --extension-id $EXTENSION_ID \
          --client-id $CLIENT_ID \
          --client-secret $CLIENT_SECRET \
          --refresh-token $REFRESH_TOKEN

        chrome-webstore-upload publish \
          --extension-id $EXTENSION_ID \
          --client-id $CLIENT_ID \
          --client-secret $CLIENT_SECRET \
          --refresh-token $REFRESH_TOKEN
